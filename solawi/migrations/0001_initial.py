# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-11-12 01:21
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_member', models.BooleanField(default=True, verbose_name='Make a paying member')),
                ('is_supervisor', models.BooleanField(default=False, verbose_name='Make a depot supervisor')),
                ('countshares', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(0)])),
                ('assets', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Amount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name': 'packed product',
                'verbose_name_plural': 'packed products',
            },
        ),
        migrations.CreateModel(
            name='DefaultBasket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default=b'', help_text='basket name', max_length=15, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Depot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('location', models.CharField(default=b'', max_length=30)),
            ],
            options={
                'verbose_name': 'depot',
                'verbose_name_plural': 'depots',
            },
        ),
        migrations.CreateModel(
            name='OrderBasket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week', models.DateField(null=True)),
            ],
            options={
                'verbose_name': 'ordering basket',
                'verbose_name_plural': 'ordering baskets',
            },
        ),
        migrations.CreateModel(
            name='OrderContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'content of order',
                'verbose_name_plural': 'content of orders',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('orderable', models.BooleanField(default=True)),
                ('unit', models.CharField(default=b'', help_text='measuring unit,e.g. kg or L', max_length=15)),
                ('module_time', models.IntegerField(help_text='module duration in weeks', null=True)),
                ('price_of_module', models.FloatField(help_text='modular product price', null=True)),
                ('exchange_value', models.FloatField(default=0, help_text='exchange value per unit', null=True, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'product',
                'verbose_name_plural': 'products',
            },
        ),
        migrations.CreateModel(
            name='ProductProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orderable', models.BooleanField(default=True)),
                ('packagesize', models.FloatField(default=1)),
                ('producttype', models.CharField(blank=True, default=b'', help_text='product type', max_length=15)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productproperties', to='solawi.Product')),
            ],
            options={
                'verbose_name': 'properties of product',
                'verbose_name_plural': 'properties of products',
            },
        ),
        migrations.CreateModel(
            name='RegularyOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(default=0)),
                ('savings', models.FloatField(default=0, null=True)),
                ('period', models.IntegerField(default=1)),
                ('lastorder', models.DateField()),
                ('productproperty', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solawi.ProductProperty')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regularymodularorders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'regularly order',
                'verbose_name_plural': 'regularly orders',
            },
        ),
        migrations.CreateModel(
            name='WeeklyBasket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counterorders', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='solawi.OrderContent')),
                ('defaultbasket', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='solawi.DefaultBasket')),
            ],
        ),
        migrations.AddField(
            model_name='ordercontent',
            name='products',
            field=models.ManyToManyField(related_name='contentof', through='solawi.Amount', to='solawi.ProductProperty'),
        ),
        migrations.AddField(
            model_name='orderbasket',
            name='content',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='solawi.OrderContent'),
        ),
        migrations.AddField(
            model_name='orderbasket',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='defaultbasket',
            name='content',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='defaultordering', to='solawi.OrderContent'),
        ),
        migrations.AddField(
            model_name='amount',
            name='ordercontent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contains', to='solawi.OrderContent'),
        ),
        migrations.AddField(
            model_name='amount',
            name='productproperty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solawi.ProductProperty'),
        ),
        migrations.AddField(
            model_name='user',
            name='depot',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='members', to='solawi.Depot'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='weeklybasket',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='members', to='solawi.WeeklyBasket'),
        ),
        migrations.AlterUniqueTogether(
            name='regularyorder',
            unique_together=set([('user', 'productproperty')]),
        ),
        migrations.AlterUniqueTogether(
            name='productproperty',
            unique_together=set([('product', 'producttype', 'packagesize')]),
        ),
        migrations.AlterUniqueTogether(
            name='orderbasket',
            unique_together=set([('week', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='amount',
            unique_together=set([('ordercontent', 'productproperty')]),
        ),
    ]
